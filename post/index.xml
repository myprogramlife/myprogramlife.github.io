<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MyProgramLife</title>
    <link>https://myprogramlife.github.io/post/</link>
    <description>Recent content in Posts on MyProgramLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Apr 2020 16:30:00 +0800</lastBuildDate>
    
	<atom:link href="https://myprogramlife.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多线程</title>
      <link>https://myprogramlife.github.io/post/%E6%88%91%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 23 Apr 2020 16:30:00 +0800</pubDate>
      
      <guid>https://myprogramlife.github.io/post/%E6%88%91%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
      <description>作者：岳争 Q Q ：772768701 前言：  读完本文大概需要30分钟左右，本文有大量的实例代码和典型例题帮助大家理解java多线程。虽然多线程比较难以理解，仅靠一篇文章恐怕搞不定。但读完本文最起码能让你搞懂java多线程的70%以上，至于熟练运用，还是得大量的练习为基础。 目录  线程概述 进程：是程序的一次执行过程，或是正在运行的一个程序。线程：是一个程序里面不同的执行途径，进程包含线程。线程又分为守护线程和用户线程。1. 若一个进程同意时间执行多个线程，就是支持多线程的。2. 线程作为调度和执行的单位，每个线程用于独立的运行栈和程序计数器（PC）,线程切换开销小。   单核CPU：一块CPU在一个时间段只执行一个线程，因为频率很高，所以我们感觉不到。
  一个Java程序至少又三个进程：
  main( ) 方法的主进程
  gc( ) 垃圾回收线程
  异常处理线程，异常会影响主线程
    线程的创建和启动 第一种方法：继承Thread类 创建步骤：   创建一个类，继承Thread类
  重写Thread类中的run()方法，将线程将需要执行的操作写入run()方法中
  创建子类对象
  通过子类调用start()方法
注意：启动线程start()方法会自动调用当前线程的run()方法，不能直接调用run()方法  示例： /*** 使用Thread类创建线程*/class Cat extends Thread { public void run() {for (int i = 0; i &amp;lt; 10; i++) {System.</description>
    </item>
    
    <item>
      <title>对自己所知集合知识的梳理</title>
      <link>https://myprogramlife.github.io/post/%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 23 Apr 2020 16:30:00 +0800</pubDate>
      
      <guid>https://myprogramlife.github.io/post/%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93/</guid>
      <description>作者：岳争 Q Q ：772768701 前言：  读完本文大概需要30分钟左右，本文有大量的实例代码和典型例题帮助大家理解java集合 。虽然本人学识浅薄，仅靠一篇文章恐怕搞不定。但读完本文最起码能让你搞懂集合的70%以上，至于熟练运用，还是得大量的练习为基础。（拷贝的上一篇多线程的前言嘻嘻） 第一个问题什么是集合？ 答：集合就是储存数据的容器。 那数值和集合的区别是什么？ 答：1.数组一旦定义，长度不可改变，集合定义后长度可以改变 2.集合可以存储不同数据类型的元素，素组只能存储相同苏剧类型的元素 3.数组可以存储任何数据类型，集合只能存储引用数据类型 Collection Collection的常用方法：  Boolean add( ); //向集合中添加一个元素 Boolean addAll( ); //将指定集合中的所有元素添加到该集合 void clear( ); //清空该集合中的所有元素 Boolean remove( ); //删除集合中的指定元素 Boolean removeAll( ); //删除该集合中指定集合的所有元素 Boolean contains( ); //判断该集合是否包含此元素 Boolean containsAll( ); //判断该集合是否包含指定集合 Boolean retainsAll( ); //从该集合中保存指定集合元素，其他的全部删除 int size( ); //返回集合的长度 Boolean isEmpty( ); //判断该集合是否为空 ObjecttoArray( ); //返回包含该集合所有元素的数组 Iterator iterator( ); //放回该集合的迭代器   List List 特点： List继承了父类Collection，具有Collection中的所有方法。List存储元素是有序可重复的，主要实现List的子类有:LinkedList、AarrayList、Vector； List 特有功能  viod add( int index,Obejct obj ); //在指定位置添加元素 Object remove( int index); //根据指定索引删除元素，并放回该元素 int indexOf( Object obj ); //返回指定元素在该集合第一次出现的位置 Object get( int index ); //获取指定位置的元素 List subList( int fromIndex, int toIndex ); //截取集合   LinkedList LinkedList特点： 底层由链表组成，查询慢，增删快，线程不安全，效率高，可以存放重复的元素；  ArrayList ArrayList实现原理： 由数组组成，数组初始长度为10，当超过这个长度数组就会扩容，每次扩容会定义一个当前长度加上当前长度的二分之一长度新数组，进行数组拷贝; ArrayList特点： 底层由数组组成，查询快，增删慢，线程不安全，效率高，可以存放重复的元素。 多线程下如何使用ArrayList： ArrayList是线程不安全的，但是可以通过Collections中的synchronizedList方法将其转换为线程安全的集合在进行使用  List list = new ArrayList();List synchronizedlist = Collections.</description>
    </item>
    
    <item>
      <title>博客搭建过程</title>
      <link>https://myprogramlife.github.io/post/blog/</link>
      <pubDate>Wed, 22 Apr 2020 20:30:00 +0800</pubDate>
      
      <guid>https://myprogramlife.github.io/post/blog/</guid>
      <description>我的第一篇博客  四句搭建自己的博客：
一、创建站点
hugo new site myblog
二、下载博客主题
git clone git@github.com:shankar/hugo-grapes.git
三、新建博客文章
hugo new first.md
四、启动hugo
hugo server -t 主题文件夹名 --buildDrafts
  2020年4月22日 20：40  </description>
    </item>
    
    <item>
      <title>对自己所知集合知识的梳理</title>
      <link>https://myprogramlife.github.io/post/javaweb%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://myprogramlife.github.io/post/javaweb%E7%AC%94%E8%AE%B0/</guid>
      <description>作者：岳争 Q Q ：772768701 JavaWeb 基本概念 Web开发：   Web 网页的意思
  静态Web
 HTML CSS 提供给所有人看的数据不会改变    动态Web
 不同人在不同时间不同地点看到的各不相同 技术栈：Servlet/JSP、PHP、ASP  在java中开发动态Web网站的技术统称为JavaWeb
  Web应用程序 什么Web程序：可以提供浏览器访问的程序
一个Web应用有多个部分组成（动态Web，静态Web）
 HTML、CSS、JS JSP、Servlet Java程序 jar包 配置文件  Web应用程序编写完毕后，若想提供给外界访问，需要一个服务器来统一管理
静态Web   xxx.html这些文件都是网页后缀，如果服务器上存在这些东西，我们可以直接读取网络
客户端一次请求（Request）访问服务器，调用服务器Webservice，在服务器中寻找需要的资源（index.html），然后返回给WebService，服务器拿到资源，最后通过响应（Response）返回给客户端
  静态Web的缺点：
 页面无法动态更新，所有用户看到的都是同一个页面  轮播图、点击特效：伪动态 JavaScript VBScript   无法与数据库交互，数据无法持久化，用户无法交互    动态Web 页面会动态的展示：页面的展示效果因人而异
客户端一次请求（Request）访问服务器，服务器中WebServerPlugin会分别向动态资源（JSP/Servlet）和WebServer中寻找，然后动态资源穿给WebServer，然后响应给客户端 动态Web的缺点：
 假如服务器的动态Web资源出现了错误，我们需要重写编写我们的后台程序，重新发布  停机维护    动态Web的优点</description>
    </item>
    
  </channel>
</rss>